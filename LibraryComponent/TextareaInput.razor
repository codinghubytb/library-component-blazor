
    <div class="ch-textarea-input" style="width:@Width;">
        <Microsoft.AspNetCore.Components.Forms.InputTextArea 
                                                     Value="@Value"
                                                     ValueChanged="@OnValueChanged"
                                                     ValueExpression="@(() => Value)"
                                                     AdditionalAttributes="@additionalAttributes" />
    </div>

<style>
    .ch-textarea-input {
        border-radius: 5px;
        border: 1px solid #ccc;
        display: flex;
        border-bottom: 1px solid #ccc;
    }

    .ch-textarea-input .ch-textarea {
        width: 100%;
        border: none;
        outline: none;
        resize: none;
        background: none;
        padding: 10px 15px;
        border-radius: 5px;
    }

    .ch-textarea-input .ch-textarea::placeholder {
        color: #b7b6b6;
        font-size: 18px;
    }

    .ch-textarea-input .ch-textarea::-webkit-scrollbar {
        color: @TextColor;
        width: 4px;
    }

    .ch-textarea-input .ch-textarea::-webkit-scrollbar-track {
        background: #fff;
    }

    .ch-textarea-input .ch-textarea::-webkit-scrollbar-thumb {
        background: #ddd;
        border-radius: 8px;
    }
</style>

@code {
    private Dictionary<string, object> additionalAttributes = new Dictionary<string, object>();

    [Parameter]
    public string Value { get; set; }

    [Parameter]
    public EventCallback<string> ValueChanged { get; set; }

    [Parameter]
    public int Row { get; set; } = 10;

    [Parameter]
    public int Col { get; set; } = 50;

    [Parameter]
    public string Placeholder { get; set; } = default!;

    [Parameter]
    public string TextColor { get; set; } = "#000";

    [Parameter]
    public string BackgroundColor { get; set; } = "transparent";

    [Parameter]
    public string FontSize { get; set; } = "18px";
    
    [Parameter]
    public int Maxlength { get; set; } = 1000;

    [Parameter]
    public string Width { get; set; } = "100%";

    [Parameter]
    public bool Disabled { get; set; }

    protected override void OnParametersSet()
    {
        additionalAttributes["class"] = "ch-textarea";
        additionalAttributes["rows"] = Row;
        additionalAttributes["cols"] = Col;
        additionalAttributes["placeholder"] = Placeholder;
        additionalAttributes["disabled"] = Disabled;
        additionalAttributes["maxlength"] = Maxlength;
        additionalAttributes["style"] = $"color: {TextColor};font-size: {FontSize};background-color:{BackgroundColor}";
    }
    
    private async Task OnValueChanged(string newValue)
    {
        Value = newValue;
        await ValueChanged.InvokeAsync(newValue);
    }

}
