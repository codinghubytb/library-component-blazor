@using System.Timers

@if (IsOnChange)

{
    <div class="ch-textarea-input" style="width:@Width;">
        <textarea spellcheck="false" class="ch-textarea" style="
            color: @TextColor;
            font-size: @FontSize;
            background-color:@BackgroundColor"
                  rows=@Row
                  cols=@Col
                  placeholder=@Placeholder @onchange="OnValueChanged"
                  disabled=@Disabled></textarea>
    </div>
}
else
{
    <div class="ch-textarea-input" style="width:@Width;">
        <textarea spellcheck="false" class="ch-textarea" style="
            color: @TextColor;
            font-size: @FontSize;
            background-color:@BackgroundColor"
                  rows=@Row
                  cols=@Col
                  placeholder=@Placeholder @bind=Value @oninput="OnInput" 
                  disabled=@Disabled></textarea>
    </div>
}

<style>
    .ch-textarea-input {
        border-radius: 5px;
        border: 1px solid #ccc;
        display: flex;
        border-bottom: 1px solid #ccc;
    }

    .ch-textarea-input .ch-textarea {
        width: 100%;
        border: none;
        outline: none;
        resize: none;
        background: none;
        padding: 10px 15px;
        border-radius: 5px;
    }

    .ch-textarea-input .ch-textarea::placeholder {
        color: #b7b6b6;
        font-size: 18px;
    }

    .ch-textarea-input .ch-textarea::-webkit-scrollbar {
        color: @TextColor;
        width: 4px;
    }

    .ch-textarea-input .ch-textarea::-webkit-scrollbar-track {
        background: #fff;
    }

    .ch-textarea-input .ch-textarea::-webkit-scrollbar-thumb {
        background: #ddd;
        border-radius: 8px;
    }
</style>

@code {
    private Timer _debounceTimer;

    [Parameter]
    public int Row { get; set; } = 10;

    [Parameter]
    public int Col { get; set; } = 50;

    [Parameter]
    public bool IsOnChange { get; set; } = false;

    [Parameter]
    public string Value { get; set; } = default!;

    [Parameter]
    public string Placeholder { get; set; } = default!;

    [Parameter]
    public string TextColor { get; set; } = "#000";

    [Parameter]
    public string BackgroundColor { get; set; } = "transparent";

    [Parameter]
    public string FontSize { get; set; } = "18px";

    [Parameter]
    public string Width { get; set; } = "100%";

    [Parameter]
    public bool Disabled { get; set; }

    [Parameter]
    public EventCallback<string> ValueChanged { get; set; }

    private void OnInput(ChangeEventArgs e)
    {
        // Annuler le précédent timer
        _debounceTimer?.Stop();

        // Mettre à jour la valeur
        Value = e.Value?.ToString() ?? string.Empty;

        // Démarrer un nouveau timer pour le debounce
        _debounceTimer = new Timer(300); // Délai de 300 ms
        _debounceTimer.Elapsed += (sender, args) =>
        {
            _debounceTimer.Stop();
            InvokeAsync(() => ValueChanged.InvokeAsync(Value));
        };
        _debounceTimer.Start();
    }

    private void OnValueChanged(ChangeEventArgs e)
    {
        Value = e.Value?.ToString() ?? string.Empty;
        ValueChanged.InvokeAsync(Value);
    }

    // Assurez-vous de libérer le timer
    public void Dispose()
    {
        _debounceTimer?.Dispose();
    }
}
