<div style="display:flex; width: 100%; gap: 10px;">
    <input type="range" style="width : 100%;" id=@guid name=@guid min=@Min max=@Max @bind="Value" @oninput="OnValueChanged" step=1 disabled=@Disabled />
    <label style="text-align: end;color: @TextColor;width: 50px;" for=@guid>@Value</label>
</div>


@code {
    // A private field to store a unique identifier (GUID) for the component instance.
    private string guid { get; set; } = Guid.NewGuid().ToString();

    // Parameter to hold the current value of the input (range or number).
    [Parameter]
    public double Value { get; set; } = default!;

    // Parameter for the minimum allowable value of the input.
    [Parameter]
    public double Min { get; set; } = 0.0;

    // Parameter for the maximum allowable value of the input.
    [Parameter]
    public double Max { get; set; } = 100.0;

    // Parameter to define the step increment for the input value.
    [Parameter]
    public double Step { get; set; } = 0.1;

    // Parameter to hold the title of the input component (e.g., label or tooltip).
    [Parameter]
    public string Title { get; set; } = default!;

    // Parameter for setting the text color of the input label or title.
    [Parameter]
    public string TextColor { get; set; } = "#000";

    // Parameter to specify the color of the range slider when displayed.
    [Parameter]
    public string ColorRange { get; set; } = "#000";

    // Parameter to determine if the input should be disabled.
    [Parameter]
    public bool Disabled { get; set; }

    // Event callback to notify the parent component when the value changes.
    [Parameter]
    public EventCallback<double> ValueChanged { get; set; }

    // Method that gets called when the input value changes.
    private async Task OnValueChanged(ChangeEventArgs e)
    {
        double newValue;

        // Attempt to parse the new value from the input.
        if (double.TryParse(e.Value?.ToString(), out newValue))
        {
            // If parsing is successful, update the Value property.
            Value = newValue;
        }
        else
        {
            // If parsing fails, reset the Value property to 0.
            Value = 0;
        }

        // Invoke the ValueChanged callback to notify the parent component of the change.
        await ValueChanged.InvokeAsync(Value);
    }
}
