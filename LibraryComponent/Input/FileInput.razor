@using Microsoft.AspNetCore.Components.Forms

<label for="images" class="ch-drop-container @(isFileSelected ? "ch-file-selected" : "")" id="dropcontainer">
    <span class="ch-drop-title" style="color:@TextColor">Drop files here</span>
    or
    
    <InputFile class="ch-drop-input" OnChange="HandleImageUpload" id="images" accept=@AcceptedFileTypes />
</label>

<style>
    .ch-drop-container {
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        gap: 10px;
        height: 200px;
        padding: 20px;
        color: #222245;
        cursor: pointer;
        transition: background 0.2s ease-in-out, border 0.2s ease-in-out; /* Ajoutez une transition */
        border: 2px dashed #222245; /* Bordure par défaut */
    }

        .ch-drop-container:hover {
        background: #eee;
    }

    .ch-drop-title {
        font-size: 20px;
        font-weight: bold;
        text-align: center;
    }

    .ch-drop-container.drag-active {
        background: #eee;
    }

    .ch-drop-input[type=file] {
        width: 100%;
        max-width: 100%;
        color: #222245;
        padding: 8px;
        background-color: #fff;
        border: 1px solid #222245;
    }

        .ch-drop-input[type=file]:focus {
        outline: 2px dashed #222245;
        outline-offset: 2px;
    }

        .ch-drop-input[type=file]::file-selector-button {
        margin-right: 8px;
        border: none;
        background: #222245;
        padding: 8px 12px;
        color: #fff;
        cursor: pointer;
    }

            .ch-drop-input[type=file]::file-selector-button:hover {
        background: #4747b8;
    }

    .ch-file-selected {
        border: 5px solid #4CAF50; 
    }

</style>

@code {
    [Parameter]
    public string AcceptedFileTypes { get; set; } = "image/*";

    // Parameter to set the text color for the component.
    [Parameter]
    public string TextColor { get; set; } = "#000";

    // Event callback to notify the parent component when a file is selected or changed.
    [Parameter]
    public EventCallback<InputFileChangeEventArgs> ValueChanged { get; set; }

    // State variable to track whether a file has been selected.
    private bool isFileSelected = false; // Boolean to indicate if a file is selected.

    // Method called when a file is uploaded or changed.
    private async Task HandleImageUpload(InputFileChangeEventArgs e)
    {
        // Update the state to reflect whether a file has been selected.
        isFileSelected = e.FileCount > 0; // Set to true if one or more files are selected.

        // Invoke the ValueChanged callback to notify the parent component of the file change.
        await ValueChanged.InvokeAsync(e);
    }
}
