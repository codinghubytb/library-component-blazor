<div style="display:flex; width: 100%; gap: 10px;">
    <input type="range" style="width : 100%;" id=@guid name=@guid min=@Min max=@Max @bind="Value" @oninput="OnValueChanged" step=@Step disabled=@Disabled />
    <label style="text-align: end;color: @TextColor;width: 50px;" for=@guid>@Value</label>
</div>

<style>

</style>


@code {
    private string guid { get; set; } = Guid.NewGuid().ToString();

    [Parameter]
    public double Value { get; set; } = default!;

    [Parameter]
    public double Min { get; set; } = 0.0;

    [Parameter]
    public double Max { get; set; } = 100.0;

    [Parameter]
    public double Step { get; set; } = 0.1;

    [Parameter]
    public string Title { get; set; } = default!;

    [Parameter]
    public string TextColor { get; set; } = "#000";

    [Parameter]
    public string ColorRange { get; set; } = "#000";

    [Parameter]
    public bool Disabled { get; set; }

    [Parameter]
    public EventCallback<double> ValueChanged { get; set; }

    private async Task OnValueChanged(ChangeEventArgs e)
    {
        double newValue;

        if (double.TryParse(e.Value?.ToString(), out newValue))
        {
            Value = newValue;
        }
        else
        {
            Value = 0;
        }

        await ValueChanged.InvokeAsync(Value);
    }

}