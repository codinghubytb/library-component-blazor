@typeparam TValue

<div class="ch-text-select" style="width:@Width%;">
    <Microsoft.AspNetCore.Components.Forms.InputSelect Value="@Value"
                                                        TValue="TValue"
                                                        ValueChanged="@OnValueChanged"
                                                        ValueExpression="@(() => Value)"
                                                        AdditionalAttributes="@additionalAttributes">
        @ChildContent
    </Microsoft.AspNetCore.Components.Forms.InputSelect>
</div>

<style>
    .ch-text-select {
        border-radius: 5px;
        border: 1px solid #ccc;
        display: flex;
        border-bottom: 1px solid #ccc;
    }

    .ch-text-select .ch-select {
        width: 100%;
        border: none;
        outline: none;
        resize: none;
        font-size: 18px;
        padding: 10px 15px;
        border-radius: 5px;
    }

    .ch-text-select .ch-select::placeholder {
        color: #b7b6b6;
    }
</style>

@code {
    private Dictionary<string, object> additionalAttributes = new Dictionary<string, object>();

    [Parameter]
    public TValue Value { get; set; }

    [Parameter]
    public EventCallback<TValue> ValueChanged { get; set; }

    [Parameter]
    public string TextColor { get; set; } = "#000";

    [Parameter]
    public string BackgroundColor { get; set; } = "Transparent";

    private int _width = 100;

    [Parameter]
    public int Width
    {
        get => _width;
        set => _width = value >= 0 && value <= 100 ? value : 100;
    }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    protected override void OnParametersSet()
    {
        additionalAttributes["class"] = "ch-select";
        additionalAttributes["style"] = $"color: {TextColor}; background: {BackgroundColor};";
    }

    private async Task OnValueChanged(TValue newValue)
    {
        Value = newValue;
        await ValueChanged.InvokeAsync(newValue);
    }
}
