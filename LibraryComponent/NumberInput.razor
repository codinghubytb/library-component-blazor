@typeparam TValue

<div class="ch-number-input">
    <Microsoft.AspNetCore.Components.Forms.InputNumber Value="@Value"
                                                        TValue="TValue"
                                                        ValueChanged="@OnValueChanged"
                                                        ValueExpression="@(() => Value)"
                                                        AdditionalAttributes="@additionalAttributes" />
</div>

<style>
    .ch-number-input {
        border-radius: 5px;
        border: 1px solid #ccc;
        display: flex;
        border-bottom: 1px solid #ccc;
        width: 100%;
    }

    .ch-number-input .ch-input {
        width: 100%;
        border: none;
        outline: none;
        resize: none;
        background: none;
        font-size: 18px;
        padding: 10px 15px;
        border-radius: 5px;
    }

    .ch-number-input .ch-input::placeholder {
        color: #b7b6b6;
    }

    .ch-number-input .ch-input::-webkit-scrollbar {
        width: 4px;
    }

    .ch-number-input .ch-input::-webkit-scrollbar-track {
        background: #fff;
    }

    .ch-number-input .ch-input::-webkit-scrollbar-thumb {
        background: #ddd;
        border-radius: 8px;
    }
</style>

@code {
    private Dictionary<string, object> additionalAttributes = new Dictionary<string, object>();

    [Parameter]
    public TValue Value { get; set; }

    [Parameter]
    public EventCallback<TValue> ValueChanged { get; set; }

    [Parameter]
    public TValue Min { get; set; } = default!; // Changez ici pour le type approprié

    [Parameter]
    public TValue Max { get; set; } = default!; // Changez ici pour le type approprié

    [Parameter]
    public string Placeholder { get; set; } = default!;

    [Parameter]
    public string TextColor { get; set; } = "#000";

    [Parameter]
    public bool Disabled { get; set; }

    protected override void OnParametersSet()
    {
        additionalAttributes["class"] = "ch-input";
        additionalAttributes["min"] = Min;
        additionalAttributes["max"] = Max;
        additionalAttributes["placeholder"] = Placeholder;
        additionalAttributes["disabled"] = Disabled;

        additionalAttributes["style"] = $"color: {TextColor};";
    }

    private async Task OnValueChanged(TValue newValue)
    {
        Value = newValue;
        await ValueChanged.InvokeAsync(newValue);
    }
}
