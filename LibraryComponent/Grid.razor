@typeparam TItem

@if (Items == null || !Items.Any())
{
    @if (EmptyResults != null)
    {
        @EmptyResults
    }
    else
    {
        <NoResults Message="Oops, no results found." Image=@IconNoResult ShowDiscoverButton="false" />
    }
}
else
{
    <div class="cards" style="gap:@($"{Gap}px")">
        @foreach (TItem item in Items)
        {
            @ItemTemplate(item)
        }
    </div>
}

<style>
    .cards {
        display: grid;
        grid-template-columns: repeat(1, 1fr);
        padding: 0 0px;
    }
</style>

<style>
    @MediaWidthStyle
</style>

@code {
    // Collection of items to display, required for editing.
    [EditorRequired]
    [Parameter]
    public IEnumerable<TItem>? Items { get; set; }

    // Template for rendering each item in the Items collection, required for editing.
    [EditorRequired]
    [Parameter]
    public RenderFragment<TItem> ItemTemplate { get; set; } = default!;

    // Content to display when the item list is empty.
    [Parameter]
    public RenderFragment? EmptyResults { get; set; }

    
    [Parameter]
    public int ColumnsXXL { get; set; } = 1;

    [Parameter]
    public int ColumnsXL { get; set; } = 1;

    [Parameter]
    public int ColumnsLG { get; set; } = 1;

    [Parameter]
    public int ColumnsMD { get; set; } = 1;

    [Parameter]
    public int ColumnsSM { get; set; } = 1;
    
    [Parameter]
    public int ColumnsXSM { get; set; } = 1;
    
    [Parameter]
    public int Gap { get; set; } = 40;

    // Icon to display when no results are found.
    [Parameter]
    public string IconNoResult { get; set; } = "";

    // Dynamic CSS style for managing the width of cards based on screen size.
    public string MediaWidthStyle => $@"
    
@media (max-width: 576px) {{
    .cards {{
        grid-template-columns: repeat({ColumnsXSM}, 1fr); // One column for small screens.
    }}
}}

@media (min-width: 576px) {{
    .cards {{
        grid-template-columns: repeat({ColumnsSM}, 1fr); // One column for small screens.
    }}
}}

@media (min-width: 768px) {{
    .cards {{
        grid-template-columns: repeat({ColumnsMD}, 1fr); // One column for medium screens.
    }}
}}

@media (min-width: 992px) {{
    .cards {{
        grid-template-columns: repeat({ColumnsLG}, 1fr); // Number of columns defined by MaxColumns for large screens.
    }}
}}
@media (min-width: 1200px) {{
    .cards {{
        grid-template-columns: repeat({ColumnsXL}, 1fr); // Number of columns defined by MaxColumns for large screens.
    }}
}}
@media (min-width: 1400px) {{
    .cards {{
        grid-template-columns: repeat({ColumnsXXL}, 1fr); // Number of columns defined by MaxColumns for large screens.
    }}
}}";
}
