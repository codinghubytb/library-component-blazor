<div class="container-imageupload">
  <div class="upload-box">
    <div class="image-wrapper">
      <img class="img" src=@SrcImage alt="" 
          style="
              background-color: white;
              width: @($"{WidthImage}%");
              height: @($"{HeightImage}%");
              transform: rotate(@($"{Rotate}deg"));
              object-fit: @ObjectFit.ToString().ToLower();
              filter : blur(@($"{Blur}px")) 
                       @(Invert ? " invert(100%) " : "") 
                       @(GrayScale ? " grayscale(100%) " : "");
          "/>
          
      @if (!string.IsNullOrEmpty(SrcWatermark))
      {
          var positionStyle = PositionWatermark switch
          {
              Position.NorthWest => "top: 0%; left: 0%;",
              Position.NorthEast => "top: 0%; right: 0%;",
              Position.SouthWest => "bottom: 0%; left: 0%;",
              Position.SouthEast => "bottom: 0%; right: 0%;",
              Position.Center => "top: 50%; left: 50%; transform: translate(-50%, -50%);",
              _ => ""
          };

          <img src="@SrcWatermark" class="watermark" 
               style="opacity:@($"{OpacityWatermark}%"); max-width: @WidthWatermark%; height: auto; position: absolute; @positionStyle" />
      }
    </div>

    <div class="delete-btn" @onclick=@DeleteImage>
      <div class="content-hover-delete">
        <img class="icon" width="64" height="64" src=@SrcIconDelete />
        <span>Delete</span>
      </div>
    </div>
  </div>
</div>

<style>
  .container-imageupload {
    display: flex;
    justify-content: center;
    align-items: center;
    background-color: lightgray;
    width: 100%;
    height: 100%;
    border-radius: 5px;
    border: 2px dashed #afafaf;
  }

  .upload-box {
    position: relative;
    cursor: pointer;
    display: flex;
    justify-content: center;
    align-items: center;
    background-color: lightgray;
    width: 100%;
    height: 100%;
  }

  .image-wrapper {
    position: relative;
    display: inline-block;
  }

  .upload-box .img {
    width: 100%;  /* Adapte l'image à la taille du conteneur */
    height: 100%;
    position: relative;
    display: block;
    border-radius: 5px;
  }

  .watermark {
    position: absolute;
    z-index: 10;
    width: auto; 
  }

  .delete-btn {
    z-index: 20;
    position: absolute;
    top: 0%;
    left: 0%;
    width: 100%;
    height: 100%;
    background-color: rgba(255, 0, 0, 0.9);
    color: black;
  }

  .delete-btn .content-hover-delete {
    position: absolute;
    top: 50%;
    left: 50%;
    display: flex;
    justify-content: center;
    align-items: center;
    flex-direction: column;
    transform: translate(-50%, -50%);
  }

  .delete-btn .content-hover-delete span {
    color: #ddd;
    font-size: xx-large;
    font-weight: 500;
  }

  .delete-btn .content-hover-delete .icon {
    filter: brightness(0) invert(0.8);
    fill: #ddd;
  }

  .upload-box .delete-btn {
    display: none;
  }

  .upload-box:hover {
    opacity: 0.5;
  }

  .upload-box:hover .delete-btn {
    display: block;
  }
</style>

<style>
    @KeyframesStyle
</style>

@code {
    [Parameter]
    public string SrcImage { get; set; } = string.Empty;

    [Parameter]
    public string SrcWatermark { get; set; } = string.Empty;

    [Parameter]
    public ObjectFitOptions ObjectFit { get; set; } = ObjectFitOptions.Contain;

    [Parameter]
    public Position PositionWatermark { get; set; } = Position.NorthWest;

    [Parameter]
    public string SrcIconDelete { get; set; } = string.Empty;

    [Parameter]
    public int Rotate { get; set; } = 0;

    [Parameter]
    public int Blur { get; set; } = 0;

    [Parameter]
    public double WidthWatermark { get; set; } = 20;

    [Parameter]
    public double OpacityImage { get; set; } = 100;

    [Parameter]
    public double OpacityWatermark { get; set; } = 100;

    [Parameter]
    public bool GrayScale { get; set; } = false;

    [Parameter]
    public bool Invert { get; set; } = false;

    [Parameter]
    public int WidthImage { get; set; } = 100;

    [Parameter]
    public int HeightImage { get; set; } = 100;

    [Parameter]
    public EventCallback OnDelete { get; set; }

    public Task DeleteImage()
    {
        return OnDelete.InvokeAsync();
    }
    private string KeyframesStyle => $@"

@media (max-width: 920px) {{

    .upload-box {{

        max-width : 250px;
        max-height: 250px;
        height: 250px;
    }}

    .image-wrapper {{
        max-width : 250px;
        max-height: 250px;
        height: 250px;
    }}
}}

@media (min-width: 920px) {{


      .upload-box {{

        max-width : 400px;
        max-height: 400px;
        height: 400px;
    }}
    .image-wrapper {{
        max-width : 400px;
        max-height: 400px;
        height: 400px;
    }}
}}
    ";
    public enum Position
    {
        Center,
        NorthWest,
        NorthEast,
        SouthEast,
        SouthWest
    }
    public enum ObjectFitOptions
    {
        Fill,       // L'image est étirée pour remplir le conteneur
        Contain,    // L'image est redimensionnée pour s'adapter en conservant ses proportions
        Cover,      // L'image remplit le conteneur, mais peut être recadrée
        None,       // L'image garde sa taille d'origine
        ScaleDown   // L'image est réduite seulement si elle est plus grande que le conteneur
    }
}
